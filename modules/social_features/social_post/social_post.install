<?php

/**
 * @file
 * Install, update and uninstall functions for the social_comment module.
 */

use Drupal\user\Entity\Role;
use Drupal\Core\Database\Database;

/**
 * PROCEED WITH CARE HERE!
 *
 * The below issue causes updates from the social_post module to be recognizes
 * as post updates from the social profile.
 *
 * Therefore don't create update hooks here!!!!
 *
 * https://www.drupal.org/node/2880361
 */

/**
 * Implements hook_install().
 *
 * Perform actions related to the installation of social_post.
 */
function social_post_install() {
  // Set some default permissions.
  _social_post_set_permissions();
}

/**
 * Trigger clean up functions for orphaned posts.
 */
function social_post_post_update_remove_orphaned_posts() {
  $connection = Database::getConnection();

  // Inner select of all users for the WHERE clause.
  $user_query = $connection->select('users', 'u')
    ->fields('u', ['uid']);

  // Find the user ids of deleted users where posts were left behind.
  $result = Database::getConnection()
    ->select('post_field_data', 'p')
    ->fields('p', ['id'])
    ->condition('user_id', $user_query, 'NOT IN')
    ->execute()
    ->fetchAll();

  $pids = [];
  foreach ($result as $row) {
    $pids[] = $row->id;
  }

  \Drupal::logger('social_post')->info('Removing @count orphaned posts for deleted users', ['@count' => count($pids)]);

  $storage_handler = \Drupal::entityTypeManager()->getStorage('post');
  $entities = $storage_handler->loadMultiple($pids);
  $storage_handler->delete($entities);
}

/**
 * Function to set permissions.
 */
function _social_post_set_permissions() {
  $roles = Role::loadMultiple();

  /** @var \Drupal\user\Entity\Role $role */
  foreach ($roles as $role) {
    if ($role->id() === 'administrator') {
      continue;
    }

    $permissions = _social_post_get_permissions($role->id());
    user_role_grant_permissions($role->id(), $permissions);
  }
}

/**
 * Return the permissions per role.
 *
 * @param string $role
 *   The role to get the permissions for.
 *
 * @return array
 *   A list of permissions.
 */
function _social_post_get_permissions($role) {
  // Anonymous.
  $permissions['anonymous'] = [
    'view public posts',
    'view published post entities',
  ];

  // Authenticated.
  $permissions['authenticated'] = array_merge($permissions['anonymous'], [
    'add post entities',
    'delete own post entities',
    'edit own post entities',
    'view community posts',
    'view own unpublished post entities',
  ]);

  // Content manager.
  $permissions['contentmanager'] = array_merge($permissions['authenticated'], [
    'delete any post entities',
    'edit any post entities',
    'view unpublished post entities',
  ]);

  // Site manager.
  $permissions['sitemanager'] = array_merge($permissions['contentmanager'], []);

  if (isset($permissions[$role])) {
    return $permissions[$role];
  }
  return [];
}
